import numpy as np
import pandas as pd

# Load the Boston Housing dataset from sklearn
from sklearn.datasets import load_boston
boston = load_boston()

# Creating a DataFrame from the dataset
dataset = pd.DataFrame(boston.data, columns=boston.feature_names)
dataset['MEDV'] = boston.target

# View the first few rows of the dataset
dataset.head()

# Define the independent variables (features) and dependent variable (target)
X = dataset.iloc[:, :-1].values  # Features (all columns except 'MEDV')
y = dataset['MEDV'].values       # Target variable ('MEDV')

# Display X and y
X
y

# Split the dataset into training and testing sets
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=100)

# Import and fit a linear regression model
from sklearn.linear_model import LinearRegression

regressor = LinearRegression()
regressor.fit(X_train, y_train)

# Display model coefficients and intercept
print("Model coefficients:", regressor.coef_)
print("Model intercept:", regressor.intercept_)

# Predict the test set results
y_pred = regressor.predict(X_test)

# Calculate and display the RMSE
from sklearn.metrics import mean_squared_error

rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print("Root Mean Squared Error (RMSE):", rmse)

# Scatter plot for actual vs. predicted values
import matplotlib.pyplot as plt

plt.scatter(y_test, y_pred, color='blue', label='Actual vs Predicted')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linewidth=2, label='Ideal Fit')
plt.title('Actual vs. Predicted Values')
plt.xlabel('Actual MEDV')
plt.ylabel('Predicted MEDV')
plt.legend()
plt.show()

# Residual Analysis
import scipy.stats as stats

# Calculate residuals
residuals = y_test - y_pred

# Histogram of residuals
plt.hist(residuals, bins=20, edgecolor='black')
plt.title('Histogram of Residuals')
plt.xlabel('Residuals')
plt.ylabel('Frequency')
plt.show()

# Q-Q plot of residuals
stats.probplot(residuals, dist="norm", plot=plt)
plt.title('Q-Q Plot of Residuals')
plt.show()

# Scatter plot of residuals vs predicted values
plt.scatter(y_pred, residuals, color='blue')
plt.hlines(y=0, xmin=min(y_pred), xmax=max(y_pred), color='red')
plt.title('Residuals vs. Predicted Values')
plt.xlabel('Predicted Values')
plt.ylabel('Residuals')
plt.show()

# Plot residuals over time (index of observations)
plt.plot(residuals)
plt.title('Residuals Over Time')
plt.xlabel('Observation')
plt.ylabel('Residuals')
plt.show()
